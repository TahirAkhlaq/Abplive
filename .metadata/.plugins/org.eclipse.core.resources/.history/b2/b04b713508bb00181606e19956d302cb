package com.abp_news.pom;

import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang3.RandomStringUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.How;
import org.testng.Reporter;

abstract class menupage {
	
	@FindBy(how = How.XPATH, using="//body/div[@id='sidebar']/div[@class='container no_margin m_100 clearfix menu_top_resize']/ul[@class='navbar-items new_wid_top']/li[1]")
	WebElement indiaBtn;
	
	@FindBy(how = How.XPATH, using="//body/div[@id='sidebar']/div[@class='container no_margin m_100 clearfix menu_top_resize']/ul[@class='navbar-items new_wid_top']/li[2]")
	WebElement worldBtn;
	
	@FindBy(how = How.XPATH, using="//body/div[@id='sidebar']/div[@class='container no_margin m_100 clearfix menu_top_resize']/ul[@class='navbar-items new_wid_top']/li[3]")
	WebElement tvBtn;
	
	@FindBy(how = How.XPATH, using="//body/div[@id='sidebar']/div[@class='container no_margin m_100 clearfix menu_top_resize']/ul[@class='navbar-items new_wid_top']/li[4]")
	WebElement photoBtn;
	
	@FindBy(how = How.XPATH, using="//body/div[@id='sidebar']/div[@class='container no_margin m_100 clearfix menu_top_resize']/ul[@class='navbar-items new_wid_top']/li[5]")
	WebElement EntertainmentBtn;
	
	@FindBy(how = How.XPATH, using="//a[contains(text(),'Jobs & Education')]")
	WebElement jobBtn;
	
	@FindBy(how = How.XPATH, using="//a[contains(text(),'TRENDING NEWS')]")
	WebElement trendingnewsBtn;
	
	@FindBy(how = How.XPATH, using="//a[@title='â€¦']")
	WebElement moreMenuBtn;
	
	@FindBy(how = How.XPATH, using="//a[contains(text(),'CRICKET')]")
	WebElement cricketMenuBtn;
	
	@FindBy(how = How.XPATH, using= "//a[@href='/en']")
	WebElement wahCricketlogo;
	
	@FindBy(how = How.XPATH, using= "//a[contains(text(),'Blog')]")
	WebElement blogLink;
	
	@FindBy(how = How.XPATH, using= "//li//h1[1]")
	WebElement validateBlog;
	
	@FindBy(how = How.XPATH, using="//div[@class='row mar0 marginSides ListNews']//div[1]//div[2]//div[1]//a[1]//img[1]")
	WebElement opesdnBlog;
	
	@FindBy(how = How.XPATH, using="//i[@class='searchbox-icon sprite']")
	WebElement srchBtn;
	
	//Social links
	@FindBy(how = How.XPATH, using = "//div[@class='header_social hidden-sm-down']//a[@class='sprite fb']")
	private WebElement FbBtn;
	@FindBy(how = How.XPATH, using = "//a[@class='sprite gplus']")
	private WebElement youTubeBtn;
	@FindBy(how = How.XPATH, using = "//div[@class='header_social hidden-sm-down']//a[@class='sprite twitter']")
	private WebElement twitterBtn;
	@FindBy(how = How.XPATH, using = "//div[@class='header_social hidden-sm-down']//a[@class='sprite yt']")
	private WebElement rssBtn;
	
	
	
		public void linkVerification(WebDriver driver) {
		List<WebElement> links = driver.findElements(By.tagName("a"));
	//	links.addAll(driver.findElements(By.tagName("img")));

		
		Reporter.log("Total links are " + links.size(),true);

		for (int i = 0; i < links.size(); i++) {
			WebElement ele = links.get(i);
			String linkUrl = ele.getAttribute("href");
			try {
				URL url = new URL(linkUrl);

				HttpURLConnection httpURLConnect = (HttpURLConnection) url.openConnection();

				httpURLConnect.setConnectTimeout(3000);

				httpURLConnect.connect();

				if (httpURLConnect.getResponseCode() == 200) {
					System.out.println(linkUrl + " - " + httpURLConnect.getResponseMessage());
					Reporter.log(linkUrl + " - " + httpURLConnect.getResponseMessage());
				}
				if (httpURLConnect.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {
					System.out.println(linkUrl + " - " + httpURLConnect.getResponseMessage() + " - "
							+ HttpURLConnection.HTTP_NOT_FOUND);
					Reporter.log(linkUrl + " - " + httpURLConnect.getResponseMessage() + " - "
							+ HttpURLConnection.HTTP_NOT_FOUND);
				}
			} catch (Exception e) {

			}

		}

		Reporter.log("<=================All Links Verified======================>",true);
	}


public  String randomName() {
	int length = 10;
	boolean useLetters = true;
	boolean useNumbers = false;
	String generatedString = RandomStringUtils.random(length, useLetters, useNumbers);
	return generatedString;
}


public void verifySocialLinks(WebDriver driver) throws InterruptedException {
	Reporter.log("****************verifySocialLinks Method is Executing*****************", true);
	String parent = driver.getWindowHandle();
	Reporter.log("parent Window is---------->" + parent);
	FbBtn.click();
	twitterBtn.click();
	youTubeBtn.click();
	movieReviewImg.click();
	rssBtn.click();

	Reporter.log("<=========== Clicked on RSS Button============>", true);
	Set<String> allwindows = driver.getWindowHandles();
	int count = allwindows.size();
	Reporter.log("total window  " + count, true);
	for (String child : allwindows) {
		if (!parent.equalsIgnoreCase(child)) {
			driver.switchTo().window(child);
			Reporter.log("***************Child Window Title is  " + driver.getTitle(), true);
			Thread.sleep(2000);
			driver.close();

		}
	}
}
